C:\MonCode\KonnaxionV14\konnaxion\manage.py
C:\MonCode\KonnaxionV14\konnaxion\merge_production_dotenvs_in_dotenv.py
C:\MonCode\KonnaxionV14\konnaxion\config\api_router.py
C:\MonCode\KonnaxionV14\konnaxion\config\asgi.py
C:\MonCode\KonnaxionV14\konnaxion\config\celery_app.py
C:\MonCode\KonnaxionV14\konnaxion\config\urls.py
C:\MonCode\KonnaxionV14\konnaxion\config\websocket.py
C:\MonCode\KonnaxionV14\konnaxion\config\wsgi.py
C:\MonCode\KonnaxionV14\konnaxion\config\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\config\settings\base.py
C:\MonCode\KonnaxionV14\konnaxion\config\settings\local.py
C:\MonCode\KonnaxionV14\konnaxion\config\settings\production.py
C:\MonCode\KonnaxionV14\konnaxion\config\settings\test.py
C:\MonCode\KonnaxionV14\konnaxion\config\settings\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\conftest.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\scanAndMergeSimple.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\urls.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\contrib\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\contrib\sites\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\admin.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\api_views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\apps.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\models.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\serializers.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\urls.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\admin.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\api_views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\apps.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\models.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\serializers.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\admin.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\api_views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\apps.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\models.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\serializers.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\admin.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\api_views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\apps.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\models.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\serializers.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\admin.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\api_views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\apps.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\models.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\serializers.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\adapters.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\admin.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\apps.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\context_processors.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\forms.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\models.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\tasks.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\urls.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\__init__.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\api\serializers.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\api\views.py
C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\api\__init__.py


# ==== C:\MonCode\KonnaxionV14\konnaxion\manage.py ====
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys
from pathlib import Path


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.local")

    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(  # noqa: TRY003
            "Couldn't import Django. Are you sure it's installed and "  # noqa: EM101
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?",
        ) from exc

    # This allows easy placement of apps within the interior
    # konnaxion directory.
    current_path = Path(__file__).parent.resolve()
    sys.path.append(str(current_path / "konnaxion"))

    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


# ==== C:\MonCode\KonnaxionV14\konnaxion\merge_production_dotenvs_in_dotenv.py ====
from collections.abc import Sequence
from pathlib import Path

BASE_DIR = Path(__file__).parent.resolve()
PRODUCTION_DOTENVS_DIR = BASE_DIR / ".envs" / ".production"
PRODUCTION_DOTENV_FILES = [
    PRODUCTION_DOTENVS_DIR / ".django",
    PRODUCTION_DOTENVS_DIR / ".postgres",
]
DOTENV_FILE = BASE_DIR / ".env"


def merge(
    output_file: Path,
    files_to_merge: Sequence[Path],
) -> None:
    merged_content = ""
    for merge_file in files_to_merge:
        merged_content += merge_file.read_text()
        merged_content += "\n"
    output_file.write_text(merged_content)


if __name__ == "__main__":
    merge(DOTENV_FILE, PRODUCTION_DOTENV_FILES)


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\api_router.py ====
"""
Central DRF router for every Konnaxion v14 API endpoint.
`config/urls.py` only needs:
    path("api/", include("config.api_router"))
"""

from django.conf import settings
from rest_framework.routers import DefaultRouter, SimpleRouter

# ── Core / Users ──────────────────────────────────────────
from konnaxion.users.api.views import UserViewSet

# ── ethiKos ───────────────────────────────────────────────
from konnaxion.ethikos.api_views import (
    TopicViewSet,
    StanceViewSet,
    ArgumentViewSet,
)

# ── keenKonnect ───────────────────────────────────────────
from konnaxion.keenkonnect.api_views import ProjectViewSet

# ── Kollective Intelligence ───────────────────────────────
from konnaxion.kollective_intelligence.api_views import VoteViewSet

# ── KonnectED (Knowledge-library) ─────────────────────────
from konnaxion.konnected.api_views import KnowledgeResourceViewSet

# ── Kreative ──────────────────────────────────────────────
from konnaxion.kreative.api_views import (
    KreativeArtworkViewSet,
    GalleryViewSet,
)

# ---------------------------------------------------------------------------

router = DefaultRouter() if settings.DEBUG else SimpleRouter()

# Core / Users
router.register("users", UserViewSet, basename="user")

# ethiKos
router.register("ethikos/topics",    TopicViewSet,    basename="ethikos-topic")
router.register("ethikos/stances",   StanceViewSet,   basename="ethikos-stance")
router.register("ethikos/arguments", ArgumentViewSet, basename="ethikos-argument")

# keenKonnect
router.register("keenkonnect/projects", ProjectViewSet, basename="keenkonnect-project")

# Kollective Intelligence
router.register("kollective/votes", VoteViewSet, basename="kollective-vote")

# KonnectED (knowledge resources)
router.register(
    "konnected/resources",
    KnowledgeResourceViewSet,
    basename="konnected-resource",
)

# Kreative
router.register(
    "kreative/artworks",      # REST path
    KreativeArtworkViewSet,
    basename="kreative-artwork",
)
router.register(
    "kreative/galleries",
    GalleryViewSet,
    basename="kreative-gallery",
)

# ---------------------------------------------------------------------------

app_name = "api"
urlpatterns = router.urls


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\asgi.py ====
"""
ASGI config for Konnaxion project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/dev/howto/deployment/asgi/

"""

import os
import sys
from pathlib import Path

from django.core.asgi import get_asgi_application

# This allows easy placement of apps within the interior
# konnaxion directory.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
sys.path.append(str(BASE_DIR / "konnaxion"))

# If DJANGO_SETTINGS_MODULE is unset, default to the local settings
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.local")

# This application object is used by any ASGI server configured to use this file.
django_application = get_asgi_application()

# Import websocket application here, so apps from django_application are loaded first
from config.websocket import websocket_application  # noqa: E402


async def application(scope, receive, send):
    if scope["type"] == "http":
        await django_application(scope, receive, send)
    elif scope["type"] == "websocket":
        await websocket_application(scope, receive, send)
    else:
        msg = f"Unknown scope type {scope['type']}"
        raise NotImplementedError(msg)


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\celery_app.py ====
import os

from celery import Celery
from celery.signals import setup_logging

# set the default Django settings module for the 'celery' program.
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.local")

app = Celery("konnaxion")

# Using a string here means the worker doesn't have to serialize
# the configuration object to child processes.
# - namespace='CELERY' means all celery-related configuration keys
#   should have a `CELERY_` prefix.
app.config_from_object("django.conf:settings", namespace="CELERY")


@setup_logging.connect
def config_loggers(*args, **kwargs):
    from logging.config import dictConfig

    from django.conf import settings

    dictConfig(settings.LOGGING)


# Load task modules from all registered Django app configs.
app.autodiscover_tasks()


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\urls.py ====
from django.conf import settings
from django.conf.urls.static import static
from django.contrib import admin
from django.contrib.staticfiles.urls import staticfiles_urlpatterns
from django.urls import include
from django.urls import path
from django.views import defaults as default_views
from django.views.generic import TemplateView
from drf_spectacular.views import SpectacularAPIView
from drf_spectacular.views import SpectacularSwaggerView
from rest_framework.authtoken.views import obtain_auth_token

urlpatterns = [
    path("", TemplateView.as_view(template_name="pages/home.html"), name="home"),
    path(
        "about/",
        TemplateView.as_view(template_name="pages/about.html"),
        name="about",
    ),
    # Django Admin, use {% url 'admin:index' %}
    path(settings.ADMIN_URL, admin.site.urls),
    # User management
    path("users/", include("konnaxion.users.urls", namespace="users")),
    path("accounts/", include("allauth.urls")),
    # Your stuff: custom urls includes go here
    # ...
    # Media files
    *static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT),
]
if settings.DEBUG:
    # Static file serving when using Gunicorn + Uvicorn for local web socket development
    urlpatterns += staticfiles_urlpatterns()

# API URLS
urlpatterns += [
    # API base url
    path("api/", include("config.api_router")),
    # DRF auth token
    path("api/auth-token/", obtain_auth_token, name="obtain_auth_token"),
    path("api/schema/", SpectacularAPIView.as_view(), name="api-schema"),
    path(
        "api/docs/",
        SpectacularSwaggerView.as_view(url_name="api-schema"),
        name="api-docs",
    ),
]

if settings.DEBUG:
    # This allows the error pages to be debugged during development, just visit
    # these url in browser to see how these error pages look like.
    urlpatterns += [
        path(
            "400/",
            default_views.bad_request,
            kwargs={"exception": Exception("Bad Request!")},
        ),
        path(
            "403/",
            default_views.permission_denied,
            kwargs={"exception": Exception("Permission Denied")},
        ),
        path(
            "404/",
            default_views.page_not_found,
            kwargs={"exception": Exception("Page not Found")},
        ),
        path("500/", default_views.server_error),
    ]
    if "debug_toolbar" in settings.INSTALLED_APPS:
        import debug_toolbar

        urlpatterns = [
            path("__debug__/", include(debug_toolbar.urls)),
            *urlpatterns,
        ]


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\websocket.py ====
async def websocket_application(scope, receive, send):
    while True:
        event = await receive()

        if event["type"] == "websocket.connect":
            await send({"type": "websocket.accept"})

        if event["type"] == "websocket.disconnect":
            break

        if event["type"] == "websocket.receive":
            if event["text"] == "ping":
                await send({"type": "websocket.send", "text": "pong!"})


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\wsgi.py ====
"""
WSGI config for Konnaxion project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""

import os
import sys
from pathlib import Path

from django.core.wsgi import get_wsgi_application

# This allows easy placement of apps within the interior
# konnaxion directory.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
sys.path.append(str(BASE_DIR / "konnaxion"))
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "config.settings.production")

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
application = get_wsgi_application()


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\__init__.py ====
# This will make sure the app is always imported when
# Django starts so that shared_task will use this app.
from .celery_app import app as celery_app

__all__ = ("celery_app",)


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\settings\base.py ====
# ruff: noqa: ERA001, E501
"""Base settings to build other settings files upon."""

import ssl
from pathlib import Path

import environ

BASE_DIR = Path(__file__).resolve(strict=True).parent.parent.parent
# konnaxion/
APPS_DIR = BASE_DIR / "konnaxion"
env = environ.Env()

READ_DOT_ENV_FILE = env.bool("DJANGO_READ_DOT_ENV_FILE", default=False)
if READ_DOT_ENV_FILE:
    # OS environment variables take precedence over variables from .env
    env.read_env(str(BASE_DIR / ".env"))

# GENERAL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#debug
DEBUG = env.bool("DJANGO_DEBUG", False)
# Local time zone. Choices are
# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name
# though not all of them may be available with every OS.
# In Windows, this must be set to your system time zone.
TIME_ZONE = "UTC"
# https://docs.djangoproject.com/en/dev/ref/settings/#language-code
LANGUAGE_CODE = "en-us"
# https://docs.djangoproject.com/en/dev/ref/settings/#languages
# from django.utils.translation import gettext_lazy as _
# LANGUAGES = [
#     ('en', _('English')),
#     ('fr-fr', _('French')),
#     ('pt-br', _('Portuguese')),
# ]
# https://docs.djangoproject.com/en/dev/ref/settings/#site-id
SITE_ID = 1
# https://docs.djangoproject.com/en/dev/ref/settings/#use-i18n
USE_I18N = True
# https://docs.djangoproject.com/en/dev/ref/settings/#use-tz
USE_TZ = True
# https://docs.djangoproject.com/en/dev/ref/settings/#locale-paths
LOCALE_PATHS = [str(BASE_DIR / "locale")]

# DATABASES
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#databases
DATABASES = {"default": env.db("DATABASE_URL")}
DATABASES["default"]["ATOMIC_REQUESTS"] = True
# https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-DEFAULT_AUTO_FIELD
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# URLS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#root-urlconf
ROOT_URLCONF = "config.urls"
# https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application
WSGI_APPLICATION = "config.wsgi.application"

# APPS
# ------------------------------------------------------------------------------
DJANGO_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.sites",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # "django.contrib.humanize", # Handy template tags
    "django.contrib.admin",
    "django.forms",
]
THIRD_PARTY_APPS = [
    "crispy_forms",
    "crispy_bootstrap5",
    "allauth",
    "allauth.account",
    "allauth.mfa",
    "allauth.socialaccount",
    "django_celery_beat",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "drf_spectacular",
]

LOCAL_APPS = [
    "konnaxion.users",                    
    "konnaxion.kollective_intelligence",  
    "konnaxion.ethikos",                  
    "konnaxion.keenkonnect",              
    "konnaxion.konnected",               
    "konnaxion.kreative",                 
]
# https://docs.djangoproject.com/en/dev/ref/settings/#installed-apps
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# MIGRATIONS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#migration-modules
MIGRATION_MODULES = {"sites": "konnaxion.contrib.sites.migrations"}

# AUTHENTICATION
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#authentication-backends
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-user-model
AUTH_USER_MODEL = "users.User"
# https://docs.djangoproject.com/en/dev/ref/settings/#login-redirect-url
LOGIN_REDIRECT_URL = "users:redirect"
# https://docs.djangoproject.com/en/dev/ref/settings/#login-url
LOGIN_URL = "account_login"

# PASSWORDS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers
PASSWORD_HASHERS = [
    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# MIDDLEWARE
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#middleware
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

# STATIC
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#static-root
STATIC_ROOT = str(BASE_DIR / "staticfiles")
# https://docs.djangoproject.com/en/dev/ref/settings/#static-url
STATIC_URL = "/static/"
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS
STATICFILES_DIRS = [str(APPS_DIR / "static")]
# https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

# MEDIA
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#media-root
MEDIA_ROOT = str(APPS_DIR / "media")
# https://docs.djangoproject.com/en/dev/ref/settings/#media-url
MEDIA_URL = "/media/"

# TEMPLATES
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#templates
TEMPLATES = [
    {
        # https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-TEMPLATES-BACKEND
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # https://docs.djangoproject.com/en/dev/ref/settings/#dirs
        "DIRS": [str(APPS_DIR / "templates")],
        # https://docs.djangoproject.com/en/dev/ref/settings/#app-dirs
        "APP_DIRS": True,
        "OPTIONS": {
            # https://docs.djangoproject.com/en/dev/ref/settings/#template-context-processors
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.template.context_processors.i18n",
                "django.template.context_processors.media",
                "django.template.context_processors.static",
                "django.template.context_processors.tz",
                "django.contrib.messages.context_processors.messages",
                "konnaxion.users.context_processors.allauth_settings",
            ],
        },
    },
]

# https://docs.djangoproject.com/en/dev/ref/settings/#form-renderer
FORM_RENDERER = "django.forms.renderers.TemplatesSetting"

# http://django-crispy-forms.readthedocs.io/en/latest/install.html#template-packs
CRISPY_TEMPLATE_PACK = "bootstrap5"
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

# FIXTURES
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#fixture-dirs
FIXTURE_DIRS = (str(APPS_DIR / "fixtures"),)

# SECURITY
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-httponly
SESSION_COOKIE_HTTPONLY = True
# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-httponly
CSRF_COOKIE_HTTPONLY = True
# https://docs.djangoproject.com/en/dev/ref/settings/#x-frame-options
X_FRAME_OPTIONS = "DENY"

# EMAIL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend
EMAIL_BACKEND = env(
    "DJANGO_EMAIL_BACKEND",
    default="django.core.mail.backends.smtp.EmailBackend",
)
# https://docs.djangoproject.com/en/dev/ref/settings/#email-timeout
EMAIL_TIMEOUT = 5

# ADMIN
# ------------------------------------------------------------------------------
# Django Admin URL.
ADMIN_URL = "admin/"
# https://docs.djangoproject.com/en/dev/ref/settings/#admins
ADMINS = [("""Rejean McCormick""", "boatbuilder610@gmail.com")]
# https://docs.djangoproject.com/en/dev/ref/settings/#managers
MANAGERS = ADMINS
# https://cookiecutter-django.readthedocs.io/en/latest/settings.html#other-environment-settings
# Force the `admin` sign in process to go through the `django-allauth` workflow
DJANGO_ADMIN_FORCE_ALLAUTH = env.bool("DJANGO_ADMIN_FORCE_ALLAUTH", default=False)

# LOGGING
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#logging
# See https://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {"level": "INFO", "handlers": ["console"]},
}

REDIS_URL = env("REDIS_URL", default="redis://redis:6379/0")
REDIS_SSL = REDIS_URL.startswith("rediss://")

# Celery
# ------------------------------------------------------------------------------
if USE_TZ:
    # https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-timezone
    CELERY_TIMEZONE = TIME_ZONE
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-broker_url
CELERY_BROKER_URL = REDIS_URL
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#redis-backend-use-ssl
CELERY_BROKER_USE_SSL = {"ssl_cert_reqs": ssl.CERT_NONE} if REDIS_SSL else None
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-result_backend
CELERY_RESULT_BACKEND = REDIS_URL
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#redis-backend-use-ssl
CELERY_REDIS_BACKEND_USE_SSL = CELERY_BROKER_USE_SSL
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-extended
CELERY_RESULT_EXTENDED = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-backend-always-retry
# https://github.com/celery/celery/pull/6122
CELERY_RESULT_BACKEND_ALWAYS_RETRY = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#result-backend-max-retries
CELERY_RESULT_BACKEND_MAX_RETRIES = 10
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-accept_content
CELERY_ACCEPT_CONTENT = ["json"]
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-task_serializer
CELERY_TASK_SERIALIZER = "json"
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std:setting-result_serializer
CELERY_RESULT_SERIALIZER = "json"
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#task-time-limit
# TODO: set to whatever value is adequate in your circumstances
CELERY_TASK_TIME_LIMIT = 5 * 60
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#task-soft-time-limit
# TODO: set to whatever value is adequate in your circumstances
CELERY_TASK_SOFT_TIME_LIMIT = 60
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#beat-scheduler
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#worker-send-task-events
CELERY_WORKER_SEND_TASK_EVENTS = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#std-setting-task_send_sent_event
CELERY_TASK_SEND_SENT_EVENT = True
# https://docs.celeryq.dev/en/stable/userguide/configuration.html#worker-hijack-root-logger
CELERY_WORKER_HIJACK_ROOT_LOGGER = False
# django-allauth
# ------------------------------------------------------------------------------
ACCOUNT_ALLOW_REGISTRATION = env.bool("DJANGO_ACCOUNT_ALLOW_REGISTRATION", True)
# https://docs.allauth.org/en/latest/account/configuration.html
ACCOUNT_LOGIN_METHODS = {"username"}
# https://docs.allauth.org/en/latest/account/configuration.html
ACCOUNT_SIGNUP_FIELDS = ["email*", "username*", "password1*", "password2*"]
# https://docs.allauth.org/en/latest/account/configuration.html
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
# https://docs.allauth.org/en/latest/account/configuration.html
ACCOUNT_ADAPTER = "konnaxion.users.adapters.AccountAdapter"
# https://docs.allauth.org/en/latest/account/forms.html
ACCOUNT_FORMS = {"signup": "konnaxion.users.forms.UserSignupForm"}
# https://docs.allauth.org/en/latest/socialaccount/configuration.html
SOCIALACCOUNT_ADAPTER = "konnaxion.users.adapters.SocialAccountAdapter"
# https://docs.allauth.org/en/latest/socialaccount/configuration.html
SOCIALACCOUNT_FORMS = {"signup": "konnaxion.users.forms.UserSocialSignupForm"}

# django-rest-framework
# -------------------------------------------------------------------------------
# django-rest-framework - https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# django-cors-headers - https://github.com/adamchainz/django-cors-headers#setup
CORS_URLS_REGEX = r"^/api/.*$"

# By Default swagger ui is available only to admin user(s). You can change permission classes to change that
# See more configuration options at https://drf-spectacular.readthedocs.io/en/latest/settings.html#settings
SPECTACULAR_SETTINGS = {
    "TITLE": "Konnaxion API",
    "DESCRIPTION": "Documentation of API endpoints of Konnaxion",
    "VERSION": "1.0.0",
    "SERVE_PERMISSIONS": ["rest_framework.permissions.IsAdminUser"],
    "SCHEMA_PATH_PREFIX": "/api/",
}
# Your stuff...
# ------------------------------------------------------------------------------


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\settings\local.py ====
# ruff: noqa: E501
from .base import *  # noqa: F403
from .base import INSTALLED_APPS
from .base import MIDDLEWARE
from .base import env

# GENERAL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#debug
DEBUG = True
# https://docs.djangoproject.com/en/dev/ref/settings/#secret-key
SECRET_KEY = env(
    "DJANGO_SECRET_KEY",
    default="1uAiupbsbxcv5FQQB9QY7kmYrwnfquI0vsrT5sEBx0AQdLjiCWq6m6X6bClGW2qh",
)
# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
ALLOWED_HOSTS = ["localhost", "0.0.0.0", "127.0.0.1"]  # noqa: S104

# CACHES
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#caches
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "",
    },
}

# EMAIL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#email-host
EMAIL_HOST = env("EMAIL_HOST", default="mailpit")
# https://docs.djangoproject.com/en/dev/ref/settings/#email-port
EMAIL_PORT = 1025

# WhiteNoise
# ------------------------------------------------------------------------------
# http://whitenoise.evans.io/en/latest/django.html#using-whitenoise-in-development
INSTALLED_APPS = ["whitenoise.runserver_nostatic", *INSTALLED_APPS]


# django-debug-toolbar
# ------------------------------------------------------------------------------
# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#prerequisites
INSTALLED_APPS += ["debug_toolbar"]
# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#middleware
MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]
# https://django-debug-toolbar.readthedocs.io/en/latest/configuration.html#debug-toolbar-config
DEBUG_TOOLBAR_CONFIG = {
    "DISABLE_PANELS": [
        "debug_toolbar.panels.redirects.RedirectsPanel",
        # Disable profiling panel due to an issue with Python 3.12:
        # https://github.com/jazzband/django-debug-toolbar/issues/1875
        "debug_toolbar.panels.profiling.ProfilingPanel",
    ],
    "SHOW_TEMPLATE_CONTEXT": True,
}
# https://django-debug-toolbar.readthedocs.io/en/latest/installation.html#internal-ips
INTERNAL_IPS = ["127.0.0.1", "10.0.2.2"]
if env("USE_DOCKER") == "yes":
    import socket

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS += [".".join(ip.split(".")[:-1] + ["1"]) for ip in ips]
    # RunServerPlus
    # ------------------------------------------------------------------------------
    # This is a custom setting for RunServerPlus to fix reloader issue in Windows docker environment
    # Werkzeug reloader type [auto, watchdog, or stat]
    RUNSERVERPLUS_POLLER_RELOADER_TYPE = 'stat'
    # If you have CPU and IO load issues, you can increase this poller interval e.g) 5
    RUNSERVERPLUS_POLLER_RELOADER_INTERVAL = 1

# django-extensions
# ------------------------------------------------------------------------------
# https://django-extensions.readthedocs.io/en/latest/installation_instructions.html#configuration
INSTALLED_APPS += ["django_extensions"]
# Celery
# ------------------------------------------------------------------------------

# https://docs.celeryq.dev/en/stable/userguide/configuration.html#task-eager-propagates
CELERY_TASK_EAGER_PROPAGATES = True
# Your stuff...
# ------------------------------------------------------------------------------


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\settings\production.py ====
# ruff: noqa: E501
import logging

import sentry_sdk
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.logging import LoggingIntegration
from sentry_sdk.integrations.redis import RedisIntegration

from .base import *  # noqa: F403
from .base import DATABASES
from .base import INSTALLED_APPS
from .base import REDIS_URL
from .base import SPECTACULAR_SETTINGS
from .base import env

# GENERAL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#secret-key
SECRET_KEY = env("DJANGO_SECRET_KEY")
# https://docs.djangoproject.com/en/dev/ref/settings/#allowed-hosts
ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=["konnaxion.local"])

# DATABASES
# ------------------------------------------------------------------------------
DATABASES["default"]["CONN_MAX_AGE"] = env.int("CONN_MAX_AGE", default=60)

# CACHES
# ------------------------------------------------------------------------------
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            # Mimicking memcache behavior.
            # https://github.com/jazzband/django-redis#memcached-exceptions-behavior
            "IGNORE_EXCEPTIONS": True,
        },
    },
}

# SECURITY
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#secure-proxy-ssl-header
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# https://docs.djangoproject.com/en/dev/ref/settings/#secure-ssl-redirect
SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)
# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-secure
SESSION_COOKIE_SECURE = True
# https://docs.djangoproject.com/en/dev/ref/settings/#session-cookie-name
SESSION_COOKIE_NAME = "__Secure-sessionid"
# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-secure
CSRF_COOKIE_SECURE = True
# https://docs.djangoproject.com/en/dev/ref/settings/#csrf-cookie-name
CSRF_COOKIE_NAME = "__Secure-csrftoken"
# https://docs.djangoproject.com/en/dev/topics/security/#ssl-https
# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-seconds
# TODO: set this to 60 seconds first and then to 518400 once you prove the former works
SECURE_HSTS_SECONDS = 60
# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-include-subdomains
SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool(
    "DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS",
    default=True,
)
# https://docs.djangoproject.com/en/dev/ref/settings/#secure-hsts-preload
SECURE_HSTS_PRELOAD = env.bool("DJANGO_SECURE_HSTS_PRELOAD", default=True)
# https://docs.djangoproject.com/en/dev/ref/middleware/#x-content-type-options-nosniff
SECURE_CONTENT_TYPE_NOSNIFF = env.bool(
    "DJANGO_SECURE_CONTENT_TYPE_NOSNIFF",
    default=True,
)

# STATIC & MEDIA
# ------------------------
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# EMAIL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#default-from-email
DEFAULT_FROM_EMAIL = env(
    "DJANGO_DEFAULT_FROM_EMAIL",
    default="Konnaxion <noreply@konnaxion.local>",
)
# https://docs.djangoproject.com/en/dev/ref/settings/#server-email
SERVER_EMAIL = env("DJANGO_SERVER_EMAIL", default=DEFAULT_FROM_EMAIL)
# https://docs.djangoproject.com/en/dev/ref/settings/#email-subject-prefix
EMAIL_SUBJECT_PREFIX = env(
    "DJANGO_EMAIL_SUBJECT_PREFIX",
    default="[Konnaxion] ",
)
ACCOUNT_EMAIL_SUBJECT_PREFIX = EMAIL_SUBJECT_PREFIX

# ADMIN
# ------------------------------------------------------------------------------
# Django Admin URL regex.
ADMIN_URL = env("DJANGO_ADMIN_URL")

# Anymail
# ------------------------------------------------------------------------------
# https://anymail.readthedocs.io/en/stable/installation/#installing-anymail
INSTALLED_APPS += ["anymail"]
# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend
# https://anymail.readthedocs.io/en/stable/installation/#anymail-settings-reference
# https://anymail.readthedocs.io/en/stable/esps
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
ANYMAIL = {}


# LOGGING
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#logging
# See https://docs.djangoproject.com/en/dev/topics/logging for
# more details on how to customize your logging configuration.

LOGGING = {
    "version": 1,
    "disable_existing_loggers": True,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {"level": "INFO", "handlers": ["console"]},
    "loggers": {
        "django.db.backends": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
        # Errors logged by the SDK itself
        "sentry_sdk": {"level": "ERROR", "handlers": ["console"], "propagate": False},
        "django.security.DisallowedHost": {
            "level": "ERROR",
            "handlers": ["console"],
            "propagate": False,
        },
    },
}

# Sentry
# ------------------------------------------------------------------------------
SENTRY_DSN = env("SENTRY_DSN")
SENTRY_LOG_LEVEL = env.int("DJANGO_SENTRY_LOG_LEVEL", logging.INFO)

sentry_logging = LoggingIntegration(
    level=SENTRY_LOG_LEVEL,  # Capture info and above as breadcrumbs
    event_level=logging.ERROR,  # Send errors as events
)
integrations = [
    sentry_logging,
    DjangoIntegration(),
    CeleryIntegration(),
    RedisIntegration(),
]
sentry_sdk.init(
    dsn=SENTRY_DSN,
    integrations=integrations,
    environment=env("SENTRY_ENVIRONMENT", default="production"),
    traces_sample_rate=env.float("SENTRY_TRACES_SAMPLE_RATE", default=0.0),
)

# django-rest-framework
# -------------------------------------------------------------------------------
# Tools that generate code samples can use SERVERS to point to the correct domain
SPECTACULAR_SETTINGS["SERVERS"] = [
    {"url": "https://konnaxion.local", "description": "Production server"},
]
# Your stuff...
# ------------------------------------------------------------------------------


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\settings\test.py ====
"""
With these settings, tests run faster.
"""

from .base import *  # noqa: F403
from .base import TEMPLATES
from .base import env

# GENERAL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#secret-key
SECRET_KEY = env(
    "DJANGO_SECRET_KEY",
    default="y5jf2SIxaBqlJhJS6nOZ7wGWgxs7UJ0Wtgltt2l5tYf9KdlLNs7BSKeCE58YDZqy",
)
# https://docs.djangoproject.com/en/dev/ref/settings/#test-runner
TEST_RUNNER = "django.test.runner.DiscoverRunner"

# PASSWORDS
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers
PASSWORD_HASHERS = ["django.contrib.auth.hashers.MD5PasswordHasher"]

# EMAIL
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#email-backend
EMAIL_BACKEND = "django.core.mail.backends.locmem.EmailBackend"

# DEBUGGING FOR TEMPLATES
# ------------------------------------------------------------------------------
TEMPLATES[0]["OPTIONS"]["debug"] = True  # type: ignore[index]

# MEDIA
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/dev/ref/settings/#media-url
MEDIA_URL = "http://media.testserver/"
# Your stuff...
# ------------------------------------------------------------------------------


# ==== C:\MonCode\KonnaxionV14\konnaxion\config\settings\__init__.py ====


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\conftest.py ====
import pytest

from konnaxion.users.models import User
from konnaxion.users.tests.factories import UserFactory


@pytest.fixture(autouse=True)
def _media_storage(settings, tmpdir) -> None:
    settings.MEDIA_ROOT = tmpdir.strpath


@pytest.fixture
def user(db) -> User:
    return UserFactory()


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\scanAndMergeSimple.py ====
#!/usr/bin/env python3
"""
scan_and_merge.py
Concatène le contenu de tous les fichiers dont l’extension figure dans
ALLOWED_EXTENSIONS, à l’intérieur du dossier pointé (et sous‑dossiers).
Écrit l’ensemble dans <dossier>/merged_output.txt puis affiche un récapitulatif.
"""

import argparse
from pathlib import Path

###############################################################################
# Extensions incluses
###############################################################################
ALLOWED_EXTENSIONS = {".py", ".html", ".css", ".js", ".txt", ".adoc", ".csv"}


def list_files(directory: Path, output_path: Path) -> list[Path]:
    """
    Parcourt directory récursivement et renvoie la liste des fichiers admissibles.
    Le fichier de sortie est exclu.
    """
    directory = directory.resolve()
    files = []

    for path in directory.rglob("*"):
        if (
            path.is_file()
            and path.suffix.lower() in ALLOWED_EXTENSIONS
            and path.resolve() != output_path
        ):
            files.append(path)

    return files


def concatenate_files(root: Path, output_name: str = "merged_output.txt") -> Path:
    """
    Écrit la liste des fichiers + leur contenu dans root/output_name.
    Renvoie le chemin absolu du fichier créé.
    """
    output_path = (root / output_name).resolve()
    file_list = list_files(root, output_path)

    with output_path.open("w", encoding="utf-8") as outfile:
        # 1. Liste des fichiers
        outfile.write("File System Structure (Included Files Only):\n")
        for fp in file_list:
            outfile.write(f"{fp.relative_to(root)}\n")

        # 2. Contenu concaténé
        outfile.write("\n--- Concatenated Files ---\n")
        for fp in file_list:
            outfile.write(f"\n--- {fp.relative_to(root)} ---\n\n")
            try:
                outfile.write(fp.read_text(encoding="utf-8", errors="ignore"))
            except Exception as e:
                print(f"Skipping {fp} ({e})")

    return output_path


def main() -> None:
    parser = argparse.ArgumentParser(
        description="Concatène les fichiers d’un dossier dans merged_output.txt"
    )
    parser.add_argument(
        "directory",
        nargs="?",
        default=".",
        help="Dossier à analyser (défaut : dossier courant).",
    )
    parser.add_argument(
        "-o",
        "--output",
        default="merged_output.txt",
        help="Nom du fichier de sortie (défaut : merged_output.txt).",
    )
    args = parser.parse_args()

    root = Path(args.directory).expanduser().resolve()
    if not root.is_dir():
        raise SystemExit(f"Chemin invalide ou non répertoire : {root}")

    output_file = concatenate_files(root, args.output)

    # Affichage console
    print("\nFichiers inclus :")
    for fp in list_files(root, output_file):
        print(f"  • {fp.relative_to(root)}")
    print(f"\n{len(list_files(root, output_file))} fichier(s) fusionné(s).")
    print(f"Fichier créé : {output_file}")


if __name__ == "__main__":
    main()


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\urls.py ====
# konnaxion/urls.py

from django.urls import path, include

urlpatterns = [
    # ...
    path("api/ethikos/", include("konnaxion.ethikos.urls")),
    # ...
]


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\__init__.py ====
__version__ = "0.1.0"
__version_info__ = tuple(
    int(num) if num.isdigit() else num
    for num in __version__.replace("-", ".", 1).split(".")
)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\contrib\__init__.py ====
"""
To understand why this file is here, please read:

https://cookiecutter-django.readthedocs.io/en/latest/5-help/faq.html#why-is-there-a-django-contrib-sites-directory-in-cookiecutter-django
"""


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\contrib\sites\__init__.py ====
"""
To understand why this file is here, please read:

https://cookiecutter-django.readthedocs.io/en/latest/5-help/faq.html#why-is-there-a-django-contrib-sites-directory-in-cookiecutter-django
"""


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\admin.py ====
# konnaxion/ethikos/admin.py
"""
Admin site configuration for the ethikos module (v14-aligned).

• TimestampMixin ajoute created_at / updated_at **uniquement** si
  ces champs existent (évite admin E033 / E127 / E035).
• Tout ModelAdmin qui définit autocomplete_fields déclare
  également search_fields (évite admin E040).
"""

from __future__ import annotations

from typing import Sequence

from django.apps import apps
from django.contrib import admin
from django.utils.html import format_html
from django.utils.translation import gettext_lazy as _

from .models import (
    EthikosArgument,
    EthikosCategory,
    EthikosStance,
    EthikosTopic,
)

# ──────────────────────────── Mix‑in ────────────────────────────
class TimestampMixin(admin.ModelAdmin):
    """
    Ajoute dynamiquement les colonnes/readonly « created_at » et « updated_at »
    si elles existent sur le modèle.
    """

    date_hierarchy = "created_at"

    # — helpers — #
    def _time_fields(self) -> set[str]:
        return {"created_at", "updated_at"} & {
            f.name for f in self.model._meta.get_fields()
        }

    # — overrides — #
    def get_readonly_fields(
        self, request, obj=None  # noqa: D401
    ) -> Sequence[str]:  # type: ignore[override]
        return (*super().get_readonly_fields(request, obj), *self._time_fields())

    def get_list_display(self, request):  # type: ignore[override]
        cols = list(super().get_list_display(request))
        for f in self._time_fields():
            if f not in cols:
                cols.append(f)
        return tuple(cols)

# ───────────────── Category (lookup) ─────────────────
@admin.register(EthikosCategory)
class EthikosCategoryAdmin(admin.ModelAdmin):
    list_display = ("name", "description")
    search_fields = ("name",)
    list_per_page = 30

# ───────────────────── Topic (core) ──────────────────
@admin.register(EthikosTopic)
class EthikosTopicAdmin(TimestampMixin):
    list_display = (
        "title",
        "category",
        "expertise_category",
        "status_badge",
        "total_votes",
        "created_by",
        "last_activity",
    )
    list_filter = ("status", "category", "expertise_category")
    search_fields = ("title", "description")
    autocomplete_fields = ("category", "expertise_category", "created_by")
    list_select_related = ("category", "expertise_category", "created_by")
    ordering = ("-created_at",)

    @admin.display(description=_("status"), ordering="status")
    def status_badge(self, obj: EthikosTopic) -> str:
        colour = "green" if obj.status == EthikosTopic.OPEN else "red"
        return format_html(
            '<span style="color:{};font-weight:600;">{}</span>',
            colour,
            obj.get_status_display(),
        )

# ──────────────────── Stance (vote) ─────────────────
@admin.register(EthikosStance)
class EthikosStanceAdmin(admin.ModelAdmin):
    list_display = ("user", "topic", "value", "timestamp")
    list_filter = ("value",)
    search_fields = ("user__username", "topic__title")
    autocomplete_fields = ("user", "topic")
    ordering = ("-timestamp",)

# ─────────────────── Argument (comment) ──────────────
@admin.register(EthikosArgument)
class EthikosArgumentAdmin(TimestampMixin):
    list_display = ("short_content", "topic", "user", "side", "is_hidden")
    list_filter = ("side", "is_hidden")
    search_fields = ("content", "user__username", "topic__title")
    autocomplete_fields = ("topic", "user", "parent")
    list_select_related = ("topic", "user", "parent")

    @admin.display(description=_("content"))
    def short_content(self, obj: EthikosArgument) -> str:
        return (obj.content[:60] + "…") if len(obj.content) > 60 else obj.content

# ──────────────── Auto‑enregistrement générique ────────────────
ethikos_cfg = apps.get_app_config("ethikos")
for mdl in ethikos_cfg.get_models():
    if not admin.site.is_registered(mdl):
        admin.site.register(mdl)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\api_views.py ====
from rest_framework import viewsets, permissions
from .models import EthikosTopic, EthikosStance, EthikosArgument
from .serializers import (
    EthikosTopicSerializer,
    EthikosStanceSerializer,
    EthikosArgumentSerializer,
)


class TopicViewSet(viewsets.ModelViewSet):
    """CRUD for debate topics"""
    queryset = EthikosTopic.objects.select_related("created_by", "category")
    serializer_class = EthikosTopicSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)


class StanceViewSet(viewsets.ModelViewSet):
    """
    Create/update a user’s stance.
    Listing (`?topic=<id>`) shows all stances on a topic.
    """
    queryset = EthikosStance.objects.select_related("topic", "user")
    serializer_class = EthikosStanceSerializer
    permission_classes = [permissions.IsAuthenticated]

    def get_queryset(self):
        qs = super().get_queryset()
        topic_id = self.request.query_params.get("topic")
        if topic_id:
            qs = qs.filter(topic_id=topic_id)
        return qs

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


class ArgumentViewSet(viewsets.ModelViewSet):
    """Threaded arguments under a topic (pro/contra)"""
    queryset = EthikosArgument.objects.select_related("user", "topic", "parent")
    serializer_class = EthikosArgumentSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\apps.py ====
from django.apps import AppConfig


class EthikosConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "konnaxion.ethikos"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\models.py ====
# konnaxion/ethikos/models.py
from django.conf import settings
from django.core.validators import MinValueValidator, MaxValueValidator
from django.db import models

# ────────────────────────────────────────────────────────────────
#  Constants that must be available *before* the model class body
# ────────────────────────────────────────────────────────────────
STANCE_MIN = -3          # ← adjust if your spec says otherwise
STANCE_MAX = 3

# ────────────────────────────────────────────────────────────────
#  Lookup tables
# ────────────────────────────────────────────────────────────────
class EthikosCategory(models.Model):
    """Topic grouping (Politics, Bio-ethics, Tech-policy, …)."""
    name        = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)

    class Meta:
        ordering = ("name",)

    def __str__(self) -> str:
        return self.name


class EthikosTopic(models.Model):
    """One debate question."""
    OPEN,  CLOSED = "open", "closed"
    STATUS_CHOICES = [(OPEN, "Open"), (CLOSED, "Closed")]

    title       = models.CharField(max_length=255)
    description = models.TextField()
    category    = models.ForeignKey(
        EthikosCategory, on_delete=models.PROTECT, related_name="topics"
    )
    expertise_category = models.ForeignKey(
        "kollective_intelligence.ExpertiseCategory", null=True, blank=True,
        on_delete=models.SET_NULL,
    )
    created_by  = models.ForeignKey(
        settings.AUTH_USER_MODEL, on_delete=models.CASCADE,
        related_name="ethikos_topics",
    )
    status         = models.CharField(max_length=6,
                                      choices=STATUS_CHOICES, default=OPEN)
    total_votes    = models.PositiveIntegerField(default=0)  # denormalised
    last_activity  = models.DateTimeField(auto_now=True)
    created_at     = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ("-created_at",)

    def __str__(self) -> str:
        return self.title


# ────────────────────────────────────────────────────────────────
#  Main data models
# ────────────────────────────────────────────────────────────────
class EthikosStance(models.Model):
    """One user’s current stance on a topic (−3 … +3)."""
    user   = models.ForeignKey(
        settings.AUTH_USER_MODEL, on_delete=models.CASCADE,
        related_name="ethikos_stances",
    )
    topic  = models.ForeignKey(
        EthikosTopic, on_delete=models.CASCADE, related_name="stances",
    )
    value  = models.SmallIntegerField(
        validators=[MinValueValidator(STANCE_MIN),
                    MaxValueValidator(STANCE_MAX)]
    )
    timestamp = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ("user", "topic")
        indexes = [
            models.Index(fields=("topic",)),
            models.Index(fields=("user",)),
        ]
        constraints = [
            models.CheckConstraint(
                name="stance_value_between_-3_and_3",
                check=models.Q(value__gte=STANCE_MIN, value__lte=STANCE_MAX),
            ),
        ]

    def __str__(self) -> str:
        return f"{self.user} → {self.topic} = {self.value}"


class EthikosArgument(models.Model):
    """Threaded discussion posts belonging to a topic."""
    PRO, CON = "pro", "con"
    SIDE_CHOICES = [(PRO, "Pro"), (CON, "Con")]

    topic = models.ForeignKey(
        EthikosTopic, on_delete=models.CASCADE, related_name="arguments",
    )
    user = models.ForeignKey(
        settings.AUTH_USER_MODEL, on_delete=models.CASCADE,
        related_name="ethikos_arguments",
    )
    content = models.TextField()
    parent  = models.ForeignKey(
        "self", null=True, blank=True, on_delete=models.CASCADE,
        related_name="replies",
    )
    side      = models.CharField(max_length=3, choices=SIDE_CHOICES,
                                 null=True, blank=True)
    is_hidden = models.BooleanField(default=False)        # moderation flag
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        indexes  = [models.Index(fields=("topic",)),
                    models.Index(fields=("user",))]
        ordering = ("created_at",)

    def __str__(self) -> str:
        return f"{self.user} on {self.topic}"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\serializers.py ====
from rest_framework import serializers
from .models import (
    EthikosCategory,
    EthikosTopic,
    EthikosStance,
    EthikosArgument,
)

__all__ = [
    "EthikosCategorySerializer",
    "EthikosTopicSerializer",
    "EthikosStanceSerializer",
    "EthikosArgumentSerializer",
]


class EthikosCategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = EthikosCategory
        fields = "__all__"


class EthikosTopicSerializer(serializers.ModelSerializer):
    category = EthikosCategorySerializer(read_only=True)
    created_by = serializers.StringRelatedField(read_only=True)

    class Meta:
        model = EthikosTopic
        fields = "__all__"


class EthikosStanceSerializer(serializers.ModelSerializer):
    user = serializers.StringRelatedField(read_only=True)

    class Meta:
        model = EthikosStance
        fields = "__all__"


class EthikosArgumentSerializer(serializers.ModelSerializer):
    user = serializers.StringRelatedField(read_only=True)
    parent = serializers.PrimaryKeyRelatedField(read_only=True)

    class Meta:
        model = EthikosArgument
        fields = "__all__"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\urls.py ====
# konnaxion/ethikos/urls.py

from rest_framework.routers import DefaultRouter
from .api_views import TopicViewSet, StanceViewSet, ArgumentViewSet

router = DefaultRouter()
router.register(r"topics", TopicViewSet)
router.register(r"stances", StanceViewSet)
router.register(r"arguments", ArgumentViewSet)

urlpatterns = router.urls


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\views.py ====

# Create your views here.
# konnaxion/ethikos/api_views.py

from rest_framework import viewsets, permissions, mixins
from .models import EthikosTopic, EthikosStance, EthikosArgument
from .serializers import (
    EthikosTopicSerializer, EthikosStanceSerializer, EthikosArgumentSerializer
)

class TopicViewSet(viewsets.ModelViewSet):
    queryset = EthikosTopic.objects.all()
    serializer_class = EthikosTopicSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)

class StanceViewSet(mixins.CreateModelMixin,
                    mixins.UpdateModelMixin,
                    mixins.RetrieveModelMixin,
                    mixins.ListModelMixin,
                    viewsets.GenericViewSet):
    queryset = EthikosStance.objects.all()
    serializer_class = EthikosStanceSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

    def get_queryset(self):
        # List stances for the current topic or user
        topic_id = self.request.query_params.get("topic")
        qs = super().get_queryset()
        if topic_id:
            qs = qs.filter(topic_id=topic_id)
        return qs

class ArgumentViewSet(viewsets.ModelViewSet):
    queryset = EthikosArgument.objects.all()
    serializer_class = EthikosArgumentSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\ethikos\__init__.py ====


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\admin.py ====
# template for konnaxion/<app>/admin.py
from django.contrib import admin
from django.apps import apps

app_config = apps.get_app_config(__name__.split(".")[-2])  # resolves to the app name
for model in app_config.get_models():
    if not admin.site.is_registered(model):
        admin.site.register(model)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\api_views.py ====
from rest_framework import viewsets, permissions
from .models import Project
from .serializers import ProjectSerializer


class ProjectViewSet(viewsets.ModelViewSet):
    """
    Marketplace projects / problems posted by users.
    """
    queryset = Project.objects.select_related("owner")
    serializer_class = ProjectSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def perform_create(self, serializer):
        serializer.save(owner=self.request.user)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\apps.py ====
from django.apps import AppConfig


class KeenkonnectConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "konnaxion.keenkonnect"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\models.py ====
from django.conf import settings
from django.db import models
from django.utils.translation import gettext_lazy as _

class Project(models.Model):
    class Status(models.TextChoices):
        IDEA = "idea", _("Idea")
        INPROGRESS = "progress", _("In progress")
        COMPLETED = "completed", _("Completed")
        VALIDATED = "validated", _("Validated")

    title = models.CharField(max_length=200)
    description = models.TextField()
    category = models.CharField(max_length=100)
    creator = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.PROTECT,
        related_name="created_projects",
    )
    status = models.CharField(
        max_length=10, choices=Status.choices, default=Status.IDEA
    )
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    tags = models.ManyToManyField("Tag", blank=True, related_name="projects")

    class Meta:
        ordering = ("-created_at",)
        indexes = [models.Index(fields=("status", "category"))]

    def __str__(self):
        return self.title

def project_file_path(instance, filename):
    return f"projects/{instance.project_id}/{filename}"

class ProjectResource(models.Model):
    class FileType(models.TextChoices):
        IMAGE = "image", _("Image")
        DOC = "document", _("Document")
        MODEL_3D = "3d_model", _("3D model")
        OTHER = "other", _("Other")

    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name="resources")
    title = models.CharField(max_length=200, blank=True)
    description = models.TextField(blank=True)
    file = models.FileField(upload_to=project_file_path, blank=True, null=True)
    external_url = models.URLField(blank=True)
    file_type = models.CharField(max_length=15, choices=FileType.choices)
    uploaded_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
    uploaded_at = models.DateTimeField(auto_now_add=True)
    version = models.PositiveSmallIntegerField(default=1)
    converted_path = models.FileField(upload_to=project_file_path, blank=True, null=True)

    class Meta:
        ordering = ("-uploaded_at",)

class ProjectMessage(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name="messages")
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ("created_at",)
        indexes = [models.Index(fields=("project", "created_at"))]

class ProjectTask(models.Model):
    class TaskStatus(models.TextChoices):
        TODO = "todo", _("To do")
        IN_PROGRESS = "doing", _("In progress")
        DONE = "done", _("Done")

    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name="tasks")
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    status = models.CharField(max_length=10, choices=TaskStatus.choices, default=TaskStatus.TODO)
    assignee = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    due_date = models.DateField(blank=True, null=True)
    order = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ("order", "created_at")
        indexes = [models.Index(fields=("project", "status"))]

class ProjectTeam(models.Model):
    class Role(models.TextChoices):
        OWNER = "owner", _("Owner")
        COLLABORATOR = "collaborator", _("Collaborator")
        MENTOR = "mentor", _("Mentor")

    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name="team_memberships")
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    role = models.CharField(max_length=15, choices=Role.choices, default=Role.COLLABORATOR)
    joined_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ("project", "user")
        indexes = [models.Index(fields=("project", "role"))]

class ProjectRating(models.Model):
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name="ratings")
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    value = models.SmallIntegerField(choices=[(1, "+1"), (-1, "-1")])
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ("project", "user")
        indexes = [models.Index(fields=("project",))]

class Tag(models.Model):
    name = models.CharField(max_length=50, unique=True)

    def __str__(self):
        return self.name


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\serializers.py ====
from rest_framework import serializers
from .models import Project

__all__ = ["ProjectSerializer"]


class ProjectSerializer(serializers.ModelSerializer):
    owner = serializers.StringRelatedField(read_only=True)

    class Meta:
        model = Project
        fields = "__all__"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\views.py ====
from django.shortcuts import render

# Create your views here.


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\keenkonnect\__init__.py ====


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\admin.py ====
from django.contrib import admin
from .models import ExpertiseCategory

@admin.register(ExpertiseCategory)
class ExpertiseCategoryAdmin(admin.ModelAdmin):
    search_fields = ("name",)
    list_display = ("name",)
    list_per_page = 30

# Register any other models generically if not already registered
from django.apps import apps
app_config = apps.get_app_config(__name__.split(".")[-2])
for model in app_config.get_models():
    if not admin.site.is_registered(model):
        admin.site.register(model)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\api_views.py ====
from rest_framework import viewsets, permissions
from .models import Vote  # Only import real models
from .serializers import VoteSerializer  # Only import real serializers

class VoteViewSet(viewsets.ModelViewSet):
    """
    Weighted Smart-Vote cast on any target object (FK generic in the model).
    """
    queryset = Vote.objects.select_related("user")
    serializer_class = VoteSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(user=self.request.user)

# Remove ReputationViewSet entirely (no such model, no such serializer)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\apps.py ====
from django.apps import AppConfig


class KollectiveIntelligenceConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "konnaxion.kollective_intelligence"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\models.py ====

# kollective_intelligence/models.py
from django.conf import settings
from django.db import models
from django.utils import timezone


# ────────────────────────────────
# Ekoh domain
# ────────────────────────────────

class ExpertiseCategory(models.Model):
    """Catalog of knowledge domains.”"""
    name = models.CharField(max_length=120, unique=True)

    def __str__(self):
        return self.name


class UserExpertiseScore(models.Model):
    """Current domain-specific expertise weight per user.”"""
    user = models.ForeignKey(settings.AUTH_USER_MODEL,
                             on_delete=models.CASCADE,
                             related_name="expertise_scores")
    category = models.ForeignKey(ExpertiseCategory,
                                 on_delete=models.CASCADE,
                                 related_name="user_scores")
    raw_score = models.DecimalField(max_digits=7, decimal_places=3)
    weighted_score = models.DecimalField(max_digits=7, decimal_places=3)

    class Meta:
        unique_together = ("user", "category")
        indexes = [models.Index(fields=["category", "-weighted_score"])]

    def __str__(self):
        return f"{self.user} – {self.category}: {self.weighted_score}"


class UserEthicsScore(models.Model):
    """Ethical multiplier influencing all expertise weights.”"""
    user = models.OneToOneField(settings.AUTH_USER_MODEL,
                                on_delete=models.CASCADE,
                                primary_key=True)
    ethical_score = models.DecimalField(max_digits=5, decimal_places=2)

    def __str__(self):
        return f"{self.user}: {self.ethical_score}"


class ScoreConfiguration(models.Model):
    """Stores named weight configurations (global or field-specific).”"""
    weight_name = models.CharField(max_length=64)
    weight_value = models.DecimalField(max_digits=6, decimal_places=3)
    field = models.CharField(max_length=64, blank=True, null=True)

    class Meta:
        unique_together = ("weight_name", "field")


class ContextAnalysisLog(models.Model):
    """Logs every AI adjustment applied to scores.”"""
    entity_type = models.CharField(max_length=40)
    entity_id = models.PositiveBigIntegerField()
    field = models.CharField(max_length=64)
    input_metadata = models.JSONField()
    adjustments_applied = models.JSONField()
    logged_at = models.DateTimeField(default=timezone.now)


class ConfidentialitySetting(models.Model):
    """Per-user anonymity preferences.”"""
    PUBLIC = "public"
    PSEUDONYM = "pseudonym"
    ANONYMOUS = "anonymous"
    LEVEL_CHOICES = [
        (PUBLIC, "Public"),
        (PSEUDONYM, "Pseudonym"),
        (ANONYMOUS, "Anonymous"),
    ]

    user = models.OneToOneField(settings.AUTH_USER_MODEL,
                                on_delete=models.CASCADE,
                                primary_key=True)
    level = models.CharField(max_length=10, choices=LEVEL_CHOICES,
                             default=PUBLIC)


class ScoreHistory(models.Model):
    """Keeps an audit trail of every score change.”"""
    merit_score = models.ForeignKey(UserExpertiseScore,
                                    on_delete=models.CASCADE,
                                    related_name="history")
    old_value = models.DecimalField(max_digits=7, decimal_places=3)
    new_value = models.DecimalField(max_digits=7, decimal_places=3)
    change_reason = models.CharField(max_length=255)
    changed_at = models.DateTimeField(default=timezone.now)


# ────────────────────────────────
# Smart Vote domain
# ────────────────────────────────

class Vote(models.Model):
    """Stores each raw and weighted vote.”"""
    user = models.ForeignKey(settings.AUTH_USER_MODEL,
                             on_delete=models.CASCADE,
                             related_name="votes")
    target_type = models.CharField(max_length=40)
    target_id = models.PositiveBigIntegerField()
    raw_value = models.DecimalField(max_digits=6, decimal_places=3)
    weighted_value = models.DecimalField(max_digits=6, decimal_places=3)
    voted_at = models.DateTimeField(default=timezone.now)

    class Meta:
        unique_together = ("user", "target_type", "target_id")


class VoteModality(models.Model):
    """Parameters for approval / ranking / rating, etc.”"""
    name = models.CharField(max_length=40, unique=True)
    parameters = models.JSONField()


class EmergingExpert(models.Model):
    """Flags fast-rising contributors.”"""
    user = models.ForeignKey(settings.AUTH_USER_MODEL,
                             on_delete=models.CASCADE,
                             related_name="emerging_expert_flags")
    detection_date = models.DateField(default=timezone.now)
    score_delta = models.DecimalField(max_digits=7, decimal_places=3)


class VoteResult(models.Model):
    """Aggregated weighted totals per target.”"""
    target_type = models.CharField(max_length=40)
    target_id = models.PositiveBigIntegerField()
    sum_weighted_value = models.DecimalField(max_digits=12, decimal_places=3)
    vote_count = models.PositiveIntegerField()

    class Meta:
        unique_together = ("target_type", "target_id")


class IntegrationMapping(models.Model):
    """Links Smart Vote to other modules / domain objects.”"""
    module_name = models.CharField(max_length=40)
    context_type = models.CharField(max_length=40)
    mapping_details = models.JSONField()


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\serializers.py ====
# konnaxion/kollective_intelligence/serializers.py
from rest_framework import serializers
from .models import Vote   # import real models only

__all__ = ["VoteSerializer"]            # export what actually exists

class VoteSerializer(serializers.ModelSerializer):
    """
    Serialises the core Smart-Vote record.

    Fields mirror the Vote model exactly as defined in v14:
        id, user, target_type, target_id, raw_value, weighted_value, voted_at
    """
    user = serializers.StringRelatedField(read_only=True)

    class Meta:
        model  = Vote
        fields = "__all__"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\views.py ====
from django.shortcuts import render

# Create your views here.


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kollective_intelligence\__init__.py ====


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\admin.py ====
# template for konnaxion/<app>/admin.py
from django.contrib import admin
from django.apps import apps

app_config = apps.get_app_config(__name__.split(".")[-2])  # resolves to the app name
for model in app_config.get_models():
    if not admin.site.is_registered(model):
        admin.site.register(model)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\api_views.py ====
# konnaxion/konnected/api_views.py
from rest_framework import viewsets, permissions

from .models import KnowledgeResource
from .serializers import KnowledgeResourceSerializer


class KnowledgeResourceViewSet(viewsets.ModelViewSet):
    """
    CRUD endpoints for KonnectED knowledge-library items
    (video, document, course, other).

    The model follows v14 spec:
        id, title, type, url, author, created_at, updated_at
    """
    queryset = (
        KnowledgeResource.objects
        .select_related("author")        # eager-load author for list/detail
    )
    serializer_class = KnowledgeResourceSerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def perform_create(self, serializer):
        # Record the authenticated user as the author
        serializer.save(author=self.request.user)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\apps.py ====
from django.apps import AppConfig


class KonnectedConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "konnaxion.konnected"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\models.py ====
# konnaxion/konnected/models.py
from django.conf import settings
from django.db import models

class TimeStampedModel(models.Model):
    """Adds created_at / updated_at to every table."""
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    class Meta:
        abstract = True

# ──────────────────────────────
#  CertifiKation sub-module
# ──────────────────────────────
class CertificationPath(TimeStampedModel):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    def __str__(self):
        return self.name

class Evaluation(TimeStampedModel):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    path = models.ForeignKey(CertificationPath, on_delete=models.CASCADE)
    raw_score = models.FloatField()
    metadata = models.JSONField()
    def __str__(self):
        return f"{self.user} – {self.path} ({self.raw_score})"

class PeerValidation(TimeStampedModel):
    class Decision(models.TextChoices):
        APPROVED = "approved", "Approved"
        REJECTED = "rejected", "Rejected"
    evaluation = models.ForeignKey(Evaluation, on_delete=models.CASCADE)
    peer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    decision = models.CharField(max_length=8, choices=Decision.choices)
    def __str__(self):
        return f"{self.peer} → {self.evaluation} [{self.decision}]"

class Portfolio(TimeStampedModel):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    items = models.ManyToManyField('KnowledgeResource', blank=True, related_name='portfolios')
    def __str__(self):
        return self.title

class InteropMapping(TimeStampedModel):
    local_certification = models.ForeignKey(CertificationPath, on_delete=models.CASCADE)
    external_system = models.CharField(max_length=120)
    external_id = models.CharField(max_length=255)
    def __str__(self):
        return f"{self.external_system}:{self.external_id}"

# ──────────────────────────────
#  Knowledge sub-module
# ──────────────────────────────
class KnowledgeResource(TimeStampedModel):
    class ResourceType(models.TextChoices):
        VIDEO = "video", "Video"
        DOC = "doc", "Document"
        COURSE = "course", "Course"
        OTHER = "other", "Other"
    title = models.CharField(max_length=255)
    type = models.CharField(max_length=10, choices=ResourceType.choices)
    url = models.URLField()
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.SET_NULL, null=True)
    def __str__(self):
        return self.title

class KnowledgeRecommendation(TimeStampedModel):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    resource = models.ForeignKey(KnowledgeResource, on_delete=models.CASCADE)
    recommended_at = models.DateTimeField()
    def __str__(self):
        return f"{self.user} ⇢ {self.resource}"

# ──────────────────────────────
#  Co-Creation sub-module
# ──────────────────────────────
class CoCreationProject(TimeStampedModel):
    class Status(models.TextChoices):
        DRAFT = "draft", "Draft"
        ACTIVE = "active", "Active"
        ARCHIVED = "archived", "Archived"
    title = models.CharField(max_length=255)
    status = models.CharField(max_length=8, choices=Status.choices, default=Status.DRAFT)
    def __str__(self):
        return self.title

class CoCreationContribution(TimeStampedModel):
    project = models.ForeignKey(CoCreationProject, on_delete=models.CASCADE)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    content = models.TextField()
    def __str__(self):
        return f"{self.user} → {self.project}"

# ──────────────────────────────
#  Forum sub-module
# ──────────────────────────────
class ForumTopic(TimeStampedModel):
    title = models.CharField(max_length=255)
    category = models.CharField(max_length=120)
    creator = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    def __str__(self):
        return self.title

class ForumPost(TimeStampedModel):
    topic = models.ForeignKey(ForumTopic, on_delete=models.CASCADE, related_name="posts")
    author = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    content = models.TextField()
    def __str__(self):
        return f"{self.author} @ {self.topic}"

class LearningProgress(TimeStampedModel):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    resource = models.ForeignKey(KnowledgeResource, on_delete=models.CASCADE)
    progress_percent = models.DecimalField(max_digits=5, decimal_places=2)
    class Meta:
        unique_together = ("user", "resource")  # each user/resource pair only once
    def __str__(self):
        return f"{self.user} – {self.resource} ({self.progress_percent}%)"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\serializers.py ====
# konnaxion/konnected/serializers.py
from rest_framework import serializers
from .models import KnowledgeResource

__all__ = ["KnowledgeResourceSerializer"]   # only export real serializers


class KnowledgeResourceSerializer(serializers.ModelSerializer):
    """
    Serialises library items (video, doc, course…) defined by the
    KnowledgeResource model in v14.
    """
    author = serializers.StringRelatedField(read_only=True)

    class Meta:
        model  = KnowledgeResource
        fields = "__all__"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\views.py ====
from django.shortcuts import render

# Create your views here.


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\konnected\__init__.py ====


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\admin.py ====
# template for konnaxion/<app>/admin.py
from django.contrib import admin
from django.apps import apps

app_config = apps.get_app_config(__name__.split(".")[-2])  # resolves to the app name
for model in app_config.get_models():
    if not admin.site.is_registered(model):
        admin.site.register(model)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\api_views.py ====
# konnaxion/kreative/api_views.py
from rest_framework import viewsets, permissions

from .models import KreativeArtwork, Gallery
from .serializers import KreativeArtworkSerializer, GallerySerializer


class KreativeArtworkViewSet(viewsets.ModelViewSet):
    """
    CRUD for uploaded artworks (image / video / audio / other).
    Matches the KreativeArtwork model in v14.
    """
    queryset = KreativeArtwork.objects.select_related("artist")
    serializer_class = KreativeArtworkSerializer
    permission_classes = [permissions.IsAuthenticated]

    def perform_create(self, serializer):
        serializer.save(artist=self.request.user)


class GalleryViewSet(viewsets.ModelViewSet):
    """
    Curated collections of artworks.
    """
    queryset = Gallery.objects.select_related("created_by").prefetch_related("artworks")
    serializer_class = GallerySerializer
    permission_classes = [permissions.IsAuthenticatedOrReadOnly]

    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\apps.py ====
from django.apps import AppConfig


class KreativeConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "konnaxion.kreative"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\models.py ====
from django.conf import settings
from django.db import models
from django.utils.translation import gettext_lazy as _


class Tag(models.Model):
    """
    Simple tagging table that can be reused by other apps.
    """
    name = models.CharField(max_length=64, unique=True)

    class Meta:
        verbose_name = _("Tag")
        verbose_name_plural = _("Tags")

    def __str__(self) -> str:  # pragma: no cover
        return self.name


class KreativeArtwork(models.Model):
    """
    A single piece of art uploaded by a user.
    """
    class MediaType(models.TextChoices):
        IMAGE = "image", _("Image")
        VIDEO = "video", _("Video")
        AUDIO = "audio", _("Audio")
        OTHER = "other", _("Other")

    artist = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="artworks",
    )
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    media_file = models.FileField(upload_to="kreative/artworks/")
    media_type = models.CharField(
        max_length=10, choices=MediaType.choices, default=MediaType.IMAGE
    )
    year = models.PositiveIntegerField(null=True, blank=True)
    medium = models.CharField(max_length=120, blank=True)        # e.g. “oil on canvas”
    style = models.CharField(max_length=120, blank=True)         # e.g. “impressionism”
    tags = models.ManyToManyField(Tag, through="ArtworkTag", blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = _("Artwork")
        verbose_name_plural = _("Artworks")
        ordering = ["-created_at"]

    def __str__(self):  # pragma: no cover
        return self.title


class ArtworkTag(models.Model):
    artwork = models.ForeignKey(KreativeArtwork, on_delete=models.CASCADE)
    tag = models.ForeignKey(Tag, on_delete=models.CASCADE)

    class Meta:
        unique_together = ("artwork", "tag")


class Gallery(models.Model):
    """
    A curated set of artworks.
    """
    title = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        related_name="galleries_created",
    )
    theme = models.CharField(max_length=120, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    artworks = models.ManyToManyField(
        KreativeArtwork, through="GalleryArtwork", related_name="galleries"
    )

    class Meta:
        verbose_name = _("Gallery")
        verbose_name_plural = _("Galleries")
        ordering = ["-created_at"]

    def __str__(self):  # pragma: no cover
        return self.title


class GalleryArtwork(models.Model):
    """
    Through-table giving order inside a gallery.
    """
    gallery = models.ForeignKey(Gallery, on_delete=models.CASCADE)
    artwork = models.ForeignKey(KreativeArtwork, on_delete=models.CASCADE)
    order = models.PositiveIntegerField(default=0)

    class Meta:
        unique_together = ("gallery", "artwork")
        ordering = ["order"]


class CollabSession(models.Model):
    """
    Real-time co-creation room (painting, music, etc.).
    """
    SESSION_TYPES = [
        ("painting", _("Painting")),
        ("music", _("Music")),
        ("mixed", _("Mixed Media")),
    ]

    name = models.CharField(max_length=255)
    host = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name="collab_sessions_hosted",
    )
    session_type = models.CharField(max_length=20, choices=SESSION_TYPES)
    started_at = models.DateTimeField(auto_now_add=True)
    ended_at = models.DateTimeField(null=True, blank=True)
    final_artwork = models.ForeignKey(
        KreativeArtwork,
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name="created_in_sessions",
    )

    class Meta:
        verbose_name = _("Collaboration Session")
        verbose_name_plural = _("Collaboration Sessions")
        ordering = ["-started_at"]


class TraditionEntry(models.Model):
    """
    Cultural-heritage submission for Konservation archive.
    """
    REGION_MAX_LENGTH = 120

    title = models.CharField(max_length=255)
    description = models.TextField()
    region = models.CharField(max_length=REGION_MAX_LENGTH)  # could be ref-table later
    media_file = models.FileField(upload_to="kreative/traditions/")
    submitted_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        related_name="tradition_entries",
    )
    submitted_at = models.DateTimeField(auto_now_add=True)
    approved = models.BooleanField(default=False)
    approved_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="tradition_entries_approved",
    )
    approved_at = models.DateTimeField(null=True, blank=True)

    class Meta:
        verbose_name = _("Tradition Entry")
        verbose_name_plural = _("Tradition Entries")
        ordering = ["-submitted_at"]

    def __str__(self):  # pragma: no cover
        return self.title


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\serializers.py ====
# konnaxion/kreative/serializers.py
from rest_framework import serializers
from .models import KreativeArtwork, Gallery, Tag

__all__ = [
    "KreativeArtworkSerializer",
    "GallerySerializer",
]

class TagSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tag
        fields = "__all__"


class KreativeArtworkSerializer(serializers.ModelSerializer):
    artist = serializers.StringRelatedField(read_only=True)
    tags   = TagSerializer(many=True, read_only=True)

    class Meta:
        model  = KreativeArtwork
        fields = "__all__"


class GallerySerializer(serializers.ModelSerializer):
    created_by = serializers.StringRelatedField(read_only=True)
    artworks   = KreativeArtworkSerializer(many=True, read_only=True)

    class Meta:
        model  = Gallery
        fields = "__all__"


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\views.py ====
from django.shortcuts import render

# Create your views here.


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\kreative\__init__.py ====


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\adapters.py ====
from __future__ import annotations

import typing

from allauth.account.adapter import DefaultAccountAdapter
from allauth.socialaccount.adapter import DefaultSocialAccountAdapter
from django.conf import settings

if typing.TYPE_CHECKING:
    from allauth.socialaccount.models import SocialLogin
    from django.http import HttpRequest

    from konnaxion.users.models import User


class AccountAdapter(DefaultAccountAdapter):
    def is_open_for_signup(self, request: HttpRequest) -> bool:
        return getattr(settings, "ACCOUNT_ALLOW_REGISTRATION", True)


class SocialAccountAdapter(DefaultSocialAccountAdapter):
    def is_open_for_signup(
        self,
        request: HttpRequest,
        sociallogin: SocialLogin,
    ) -> bool:
        return getattr(settings, "ACCOUNT_ALLOW_REGISTRATION", True)

    def populate_user(
        self,
        request: HttpRequest,
        sociallogin: SocialLogin,
        data: dict[str, typing.Any],
    ) -> User:
        """
        Populates user information from social provider info.

        See: https://docs.allauth.org/en/latest/socialaccount/advanced.html#creating-and-populating-user-instances
        """
        user = super().populate_user(request, sociallogin, data)
        if not user.name:
            if name := data.get("name"):
                user.name = name
            elif first_name := data.get("first_name"):
                user.name = first_name
                if last_name := data.get("last_name"):
                    user.name += f" {last_name}"
        return user


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\admin.py ====
from allauth.account.decorators import secure_admin_login
from django.conf import settings
from django.contrib import admin
from django.contrib.auth import admin as auth_admin
from django.utils.translation import gettext_lazy as _

from .forms import UserAdminChangeForm
from .forms import UserAdminCreationForm
from .models import User

if settings.DJANGO_ADMIN_FORCE_ALLAUTH:
    # Force the `admin` sign in process to go through the `django-allauth` workflow:
    # https://docs.allauth.org/en/latest/common/admin.html#admin
    admin.autodiscover()
    admin.site.login = secure_admin_login(admin.site.login)  # type: ignore[method-assign]


@admin.register(User)
class UserAdmin(auth_admin.UserAdmin):
    form = UserAdminChangeForm
    add_form = UserAdminCreationForm
    fieldsets = (
        (None, {"fields": ("username", "password")}),
        (_("Personal info"), {"fields": ("name", "email")}),
        (
            _("Permissions"),
            {
                "fields": (
                    "is_active",
                    "is_staff",
                    "is_superuser",
                    "groups",
                    "user_permissions",
                ),
            },
        ),
        (_("Important dates"), {"fields": ("last_login", "date_joined")}),
    )
    list_display = ["username", "name", "is_superuser"]
    search_fields = ["name"]


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\apps.py ====
import contextlib

from django.apps import AppConfig
from django.utils.translation import gettext_lazy as _


class UsersConfig(AppConfig):
    name = "konnaxion.users"
    verbose_name = _("Users")

    def ready(self):
        with contextlib.suppress(ImportError):
            import konnaxion.users.signals  # noqa: F401


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\context_processors.py ====
from django.conf import settings


def allauth_settings(request):
    """Expose some settings from django-allauth in templates."""
    return {
        "ACCOUNT_ALLOW_REGISTRATION": settings.ACCOUNT_ALLOW_REGISTRATION,
    }


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\forms.py ====
from allauth.account.forms import SignupForm
from allauth.socialaccount.forms import SignupForm as SocialSignupForm
from django.contrib.auth import forms as admin_forms
from django.utils.translation import gettext_lazy as _

from .models import User


class UserAdminChangeForm(admin_forms.UserChangeForm):
    class Meta(admin_forms.UserChangeForm.Meta):  # type: ignore[name-defined]
        model = User


class UserAdminCreationForm(admin_forms.AdminUserCreationForm):
    """
    Form for User Creation in the Admin Area.
    To change user signup, see UserSignupForm and UserSocialSignupForm.
    """

    class Meta(admin_forms.UserCreationForm.Meta):  # type: ignore[name-defined]
        model = User
        error_messages = {
            "username": {"unique": _("This username has already been taken.")},
        }


class UserSignupForm(SignupForm):
    """
    Form that will be rendered on a user sign up section/screen.
    Default fields will be added automatically.
    Check UserSocialSignupForm for accounts created from social.
    """


class UserSocialSignupForm(SocialSignupForm):
    """
    Renders the form when user has signed up using social accounts.
    Default fields will be added automatically.
    See UserSignupForm otherwise.
    """


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\models.py ====
from django.contrib.auth.models import AbstractUser
from django.db.models import CharField
from django.urls import reverse
from django.utils.translation import gettext_lazy as _


class User(AbstractUser):
    """
    Default custom user model for Konnaxion.
    If adding fields that need to be filled at user signup,
    check forms.SignupForm and forms.SocialSignupForms accordingly.
    """

    # First and last name do not cover name patterns around the globe
    name = CharField(_("Name of User"), blank=True, max_length=255)
    first_name = None  # type: ignore[assignment]
    last_name = None  # type: ignore[assignment]

    def get_absolute_url(self) -> str:
        """Get URL for user's detail view.

        Returns:
            str: URL for user detail.

        """
        return reverse("users:detail", kwargs={"username": self.username})


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\tasks.py ====
from celery import shared_task

from .models import User


@shared_task()
def get_users_count():
    """A pointless Celery task to demonstrate usage."""
    return User.objects.count()


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\urls.py ====
from django.urls import path

from .views import user_detail_view
from .views import user_redirect_view
from .views import user_update_view

app_name = "users"
urlpatterns = [
    path("~redirect/", view=user_redirect_view, name="redirect"),
    path("~update/", view=user_update_view, name="update"),
    path("<str:username>/", view=user_detail_view, name="detail"),
]


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\views.py ====
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.messages.views import SuccessMessageMixin
from django.db.models import QuerySet
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.views.generic import DetailView
from django.views.generic import RedirectView
from django.views.generic import UpdateView

from konnaxion.users.models import User


class UserDetailView(LoginRequiredMixin, DetailView):
    model = User
    slug_field = "username"
    slug_url_kwarg = "username"


user_detail_view = UserDetailView.as_view()


class UserUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):
    model = User
    fields = ["name"]
    success_message = _("Information successfully updated")

    def get_success_url(self) -> str:
        assert self.request.user.is_authenticated  # type guard
        return self.request.user.get_absolute_url()

    def get_object(self, queryset: QuerySet | None=None) -> User:
        assert self.request.user.is_authenticated  # type guard
        return self.request.user


user_update_view = UserUpdateView.as_view()


class UserRedirectView(LoginRequiredMixin, RedirectView):
    permanent = False

    def get_redirect_url(self) -> str:
        return reverse("users:detail", kwargs={"username": self.request.user.username})


user_redirect_view = UserRedirectView.as_view()


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\__init__.py ====


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\api\serializers.py ====
from rest_framework import serializers

from konnaxion.users.models import User


class UserSerializer(serializers.ModelSerializer[User]):
    class Meta:
        model = User
        fields = ["username", "name", "url"]

        extra_kwargs = {
            "url": {"view_name": "api:user-detail", "lookup_field": "username"},
        }


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\api\views.py ====
from rest_framework import status
from rest_framework.decorators import action
from rest_framework.mixins import ListModelMixin
from rest_framework.mixins import RetrieveModelMixin
from rest_framework.mixins import UpdateModelMixin
from rest_framework.response import Response
from rest_framework.viewsets import GenericViewSet

from konnaxion.users.models import User

from .serializers import UserSerializer


class UserViewSet(RetrieveModelMixin, ListModelMixin, UpdateModelMixin, GenericViewSet):
    serializer_class = UserSerializer
    queryset = User.objects.all()
    lookup_field = "username"

    def get_queryset(self, *args, **kwargs):
        assert isinstance(self.request.user.id, int)
        return self.queryset.filter(id=self.request.user.id)

    @action(detail=False)
    def me(self, request):
        serializer = UserSerializer(request.user, context={"request": request})
        return Response(status=status.HTTP_200_OK, data=serializer.data)


# ==== C:\MonCode\KonnaxionV14\konnaxion\konnaxion\users\api\__init__.py ====


